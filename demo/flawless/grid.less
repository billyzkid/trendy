/*	 ____________________________________________________________
	/   Flawless Semantics - by Sean Steindl aka laughingwithu   \
============================================================================ */
/* 	Rythymless variables.
============================================================================ */
@rhythmic-fontsize:	16px; 		// base size of your text
@rhythmic-unit: 	24px;		// A rule of thumb is 1.5 X @rhythmic-fontsize

/* 	Setup the Grid
===============================================================================
|	@columns - Number of columns in the grid. 12 or 16 tends to work well	  |
|	@column-width - The width of columns in the grid. Any Value				  |
|	@gutter-width - The gap between elements in the grid. Highly recomend	  |
|	setting it either the same as @rhythmic-unit or a mulitple of 			  |
|	@rhythmic-unit.															  |
---------------------------------------------------------------------------- */
@columns: 			12;			// Number of columns in the grid
@column-width: 		60;			// The width of columns in the grid
@gutter-width: 		24;			// The gap between elements in the grid.
@total-width: 		80%;		// Any percentage value.
	
/* ----------------------------------------------------------------------------
|	Font-sizes (in factors relative to @rhythmic-fontsize)					  |
|	Do not use unit values here.											  |
---------------------------------------------------------------------------- */
@h1-size:			2.8;
@h2-size:			2.42;
@h3-size:			1.2;
@h4-size:			1.1;
@h5-size:			1.0;
@h6-size:			1.0;
@small-size:		0.75;
@sup-sub-size:		0.65; 

/* ----------------------------------------------------------------------------
|	Show rythym																  |
---------------------------------------------------------------------------- */
@show-rythym:		true; 		// true or false
@rythym-color: 		#eef; 		// Color of lines showing the vertical rythym

/* ----------------------------------------------------------------------------
|	Show Grid																  |
---------------------------------------------------------------------------- */
@show-grid:			true; 						// true or false
@gutter-color: 		rgba(255,255,255,0.01); 		// Color for the gutters
@column-color:		rgba(0,0,255,.06);			// Color for the columns

/* 	Load The Framework
============================================================================ */
@import "normalize.less";

// MICRO CLEARFIX - http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}


/* 	 ________________________________________
	/   MIXINS FOR FLAWLESS SEMANTICS GRID   \
===============================================================================
|	#flawless id for keeping these mixins organised						  |
---------------------------------------------------------------------------- */
#flawless {
	/* ------------------------------------------------------------------------
	|	Widths mixin useful for making sure the widths are set correctly. 	  |
	|	When the grid is pixel based it uses the @x and @column values to 	  |
	|	work out the width and when it is percentage it uses @x as @min-width |
	|	and @columns as @max-width.											  |
	------------------------------------------------------------------------ */
	.widths(@x:@columns,@columns:@columns) {
		.mixin(@x,@columns){}
		.mixin(@x,@columns)  when (ispixel(@total-width))  {
			.column-width(@x,@columns);
		}
		.mixin(@x:@min-width,@columns:@max-width)  when (ispercentage(@total-width))  {
			// mix the values around so it makes sense
			@min-width:@x;
			@max-width:@columns;
			min-width: @min-width;
			max-width: @max-width;
		}
		.mixin(@x,@columns);
	}
	
	/* 	padding and margin using gutter width as values
	======================================================================== */
	.padding-sides(@value:1){
		padding-left:@column-gutter-width * @value;
		padding-right:@column-gutter-width * @value;
	}
	.padding-left(@value:1){
		padding-left:@column-gutter-width * @value;
	}
	.padding-right(@value:1){
		padding-right:@column-gutter-width * @value;
	}
	.margin-auto(@value:1) {
		margin-left:auto;
		margin-right:auto;
	}
	.margin-sides(@value:1){
		margin-left:@column-gutter-width * @value;
		margin-right:@column-gutter-width * @value;
	}
	.margin-left(@value:1){
		margin-left:@column-gutter-width * @value;
	}
	.margin-right(@value:1){
		margin-right:@column-gutter-width * @value;
	}
	
	/* 	Equal Height Mixins - Sean Steindl aka http://github.com/laughingwithu
	======================================================================== */
	.col-equal() {
		padding-bottom:		32767px;
		margin-bottom:		-32767px;	
	}

	/* ------------------------------------------------------------------------
	|	Remove equal height column (useful when we do responsive design as we |
	|	might not care if they are equal heights. Note this sets the bottom   |
	|	padding to 0 and will need to overide other styles.	This also resets  |
	|		the bottom margin to work with our vertical rhythm.				  |
	------------------------------------------------------------------------ */
	.col-equal-remove() {
		padding-bottom: 	0;
		#rhythmless > .margin-bottom(1);
	}

	/*	Showgrid mixin by ninique at https://github.com/ninique
	======================================================================== */
	@column-grad: 			@column-width/(@column-width+@gutter-width)*100%;
	@gutter-grad: 			@gutter-width/(@column-width+@gutter-width)*100%;

	/* ------------------------------------------------------------------------
	|	This mixin is called on the .grid element where @show-grid = true but |
	|	can be called on any element.										  |
	------------------------------------------------------------------------ */ 
	.show-grid(){
		background-size: 	@total-width*((@column-width+@gutter-width) / @gridsystem-width);
		background-image: 	-moz-linear-gradient(left, @gutter-color 0%,@gutter-color @gutter-grad,@column-color @gutter-grad,@column-color @gutter-grad+@column-grad,@gutter-color @gutter-grad+@column-grad);
		background-image: 	-webkit-linear-gradient(left, @gutter-color 0%,@gutter-color @gutter-grad,@column-color @gutter-grad,@column-color @gutter-grad+@column-grad,@gutter-color @gutter-grad+@column-grad);
		background-image: 	-o-linear-gradient(left, @gutter-color 0%,@gutter-color @gutter-grad,@column-color @gutter-grad,@column-color @gutter-grad+@column-grad,@gutter-color @gutter-grad+@column-grad);
		background-image: 	-ms-linear-gradient(left, @gutter-color 0%,@gutter-color @gutter-grad,@column-color @gutter-grad,@column-color @gutter-grad+@column-grad,@gutter-color @gutter-grad+@column-grad);
		background-image: 	linear-gradient(left, @gutter-color 0%,@gutter-color @gutter-grad,@column-color @gutter-grad,@column-color @gutter-grad+@column-grad,@gutter-color @gutter-grad+@column-grad);
	}
}
 
/* ----------------------------------------------------------------------------
|	Call the Vertical rythym grid mixin - requires rythym.less. // prefer to  |
|	apply it to body as as padding values on body may be different to the	  |
|	rythym unit and in such a case the vertical rythym would stuff up.		  |
---------------------------------------------------------------------------- */ 
body {
	.mixin() {} // default value
	.mixin() when (@show-rythym = true) {	
		#rhythmless > .vertical-grid(@rythym-color);
	}
	.mixin();
}

/* 	 ________________________________
	/   Flawless Semantics - Grid    \
===============================================================================
|	Adapted by Sean Steindl aka http://github.com/laughingwithu from the	  |
|	Semantic.gs 															  |
---------------------------------------------------------------------------- */
/* 	Grid Specific Calculations - These generally should be left alone
===============================================================================
|	These values are calculated based on the values already provided in 	  |
|	config.less. The Values with @p are for the percentage grid and the other |
|	values are for the pixel based grid. The math is self explanatory but if  |
|	any one is interested or has a questions  feel free to ask.				  |
---------------------------------------------------------------------------- */
@gridsystem-width: 		(@column-width*@columns) + (@gutter-width*@columns) * 1px;
@p-gridsystem-width: 	@gridsystem-width - @gutter-width;
@total-width: 			@gridsystem-width; // Set @total-width to a % for a fluid layout
@column-gutter-width: 	@total-width*((@gutter-width)/@gridsystem-width);
@p-column-gutter-width:	@total-width*(@gutter-width/@p-gridsystem-width);

/* 	Global Box-Sizing
===============================================================================
|	While not strictly required by this Grid system it will save headaches	  |
|	down the track :) See paul Irish's comments on this						  |
|	http://www.paulirish.com/2012/box-sizing-border-box-ftw/				  |	
---------------------------------------------------------------------------- */
* {
	-moz-box-sizing: border-box; 
	-webkit-box-sizing: border-box; 
	box-sizing: border-box;
}
	
/* 	Grid
===============================================================================
|	N.B. It is not usually a good idea to make the body a grid due to the use |
|	of the overflow property... unless that is the effect you want. 		  |
|	(eg. single page websites with a fixed header and where navigation is by  | 
|	anchors.)																  |
---------------------------------------------------------------------------- */ 
.grid(@columns:@columns){
	.row(@columns);
	.mixin() {} // default value
	.mixin() when (@show-grid = true) {	
		#flawless > .show-grid();
	}
	.mixin();
}

/* 	Rows
===============================================================================
|	This mixin should be called as little as possible and only where needed	  |
|	as typically unless you change the numnber of columns such in the grid	  |
|	such as where you nest a grid, the class can be used multiple times.	  |
|																			  |
|	N.B. This mixin will only need to be called once for a pixel grid as the  |
|	@column-gutter-width will always be the same, whereas the percentage in	  |
|	a percentage grid will need to change based on its parents width.		  |
---------------------------------------------------------------------------- */ 
.row(@columns:@columns) {	
	.mixin(@columns:@columns)  when (ispixel(@total-width))  {
		width: @gridsystem-width;
		margin-left:@column-gutter-width* -1;
		}
	.mixin(@columns:@columns)  when (ispercentage(@total-width))  {
		width: @total-width + @p-column-gutter-width; // See below comment regarding @p-column-gutter-width
		margin-left:@p-column-gutter-width* -1; // Technically should be @p-column-gutter-width*-1 but browser rounding breaks the layout. Will be testing this further to eliminate the error this introduces.
	}
	.mixin(@columns);
	overflow:hidden;
	.clearfix;
}

/* 	Columns
===============================================================================
|	The .column() should only be once and then used a class together with a	  |
|	that specifies the width of the column since provided the number of		  |
|	columns in the grid	is not changed @column-gutter-width will not change.  |
|																			  |
|	N.B. This mixin will only need to be called once for a pixel grid as the  |
|	@column-gutter-width will always be the same, whereas the percentage in	  |
|	a percentage grid will need to change based on its parents width.		  |
|																			  |
---------------------------------------------------------------------------- */

.column(@columns:@columns){
	float: left;
	.mixin(@columns:@columns)  when (ispixel(@total-width))  {
		margin-left: @column-gutter-width;
	}
	.mixin(@columns:@columns)  when (ispercentage(@total-width))  {
		margin-left: @column-gutter-width; // Technically should be @p-column-gutter-width*-1 but browser rounding breaks the layout. Will be testing this further to eliminate the error this introduces.
	}
	.mixin(@columns);
}

.column-width(@x,@columns:@columns) {
	.mixin(@x,@columns:@columns)  when (ispixel(@total-width))  {
		width: (((@gutter-width+@column-width)*@x)-@gutter-width)*1px;
	}
	.mixin(@x,@columns:@columns)  when (ispercentage(@total-width))  {
		width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	}
	.mixin(@x,@columns);
}

/* 	Push
============================================================================  */
.push(@offset:1,@columns:@columns)  {
	.mixin(@offset:1,@columns:@columns)  when (ispixel(@total-width))  {
		@calculated-column-width: (((@gutter-width+@column-width)*@offset)-@gutter-width)*1px;
		margin-left: @calculated-column-width+(@column-gutter-width*2);
	}
	.mixin(@offset:1,@columns:@columns)  when (ispercentage(@total-width))  {
		@calculated-column-width: @total-width*((((@gutter-width+@column-width)*@offset)-@gutter-width) / @gridsystem-width);
		margin-left: @calculated-column-width+(@column-gutter-width*2);
	}
	.mixin(@offset,@columns);
}

@import "rhythm.less";
